'''--------------------------------------------------------------
-------------------------- 함수 장식자 ------------------------------
-----------------------------------------------------------------
<개요>
        - 다른 함수를 감싼 함수
        
        - meta의 기능이 있다.
==============================================================='''

print('--<실습1: 람다 반환 함수>--')
def make2(fn):
    return lambda : "안녕" + fn()

def make1(fn):
    return lambda : " 반가워" + fn()

def hello():
    return " 홍길동"

hi = make2(make1(hello))
print(hi())
'''------ <설명> ------
1. 호출 순서 : make2 -> make1 -> hello
------------------ '''


'''-------------------------------------------------------------'''
'''---------------------- 1. 함수 장식자 시작  ---------------------'''
'''--------------------- 어노테이션 같이 사용 가능.  --------------------'''
'''-------------------------------------------------------------'''
print('--<실습2: 데코레이션 (함수 장식자) >--')
@make2
@make1
def hello2():
    return " 신기해"
print(hello2())

'''------ <설명> ------
1. make2가 make1을 감싸고 있고,
    make1이 hello2를 감싸고 있다.
------------------ '''

'''-------------------------------------------------------------'''
'''---------------------- 2. Closure 사용  ---------------------'''
'''-------------------------------------------------------------'''

print('--<실습3: Closure만 사용>--')
def deco1(f):
    return lambda:f() + 5

def deco2(f):
    def print_func():
        print(f())
    return print_func

def func():
    return 3

ff = deco2(deco1(func))
ff()

'''------ <설명> ------
1. 순서 : func -> deco1 -> deco2
------------------ '''

print('--<실습4: 함수 장식자를 사용한 Closure>--')

@deco2
@deco1
def func2():
    return 5

func2()

'''------ <설명> ------
1. deco2가 deco1을 감싸고,
    deco1이 func2를 감싸고 있다.
------------------ '''

'''-------------------------------------------------------------'''
'''---------------------- 3. 재귀함수  ----------------------------'''
'''--------------------- 자기 자신을 부르는 함수 -----------------------'''
'''-------------------------------------------------------------'''
print('--<실습5: 재귀함수>--')
def countDown(n):
    if n == 0:
        print('완료')
    else:
        print(n, end = ' ')
        countDown(n - 1)

countDown(5) 

print('--<실습6: 팩토리얼 더하기>--')
def tot(n):
    if n == 1:
        print('탈출')
        return True
    return n + tot(n - 1)

result = tot(10)
print('10까지의 합은', result)


'''==============================================================='''