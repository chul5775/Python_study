'''--------------------------------------------------------------
------------------  변수의 생존 범위 (Scope Rule)  --------------------
-----------------------------------------------------------------
<개요>
        - 변수 영역 및 접근 순서 (LEG)
          Local → Enclosing function → Global
          
==============================================================='''


player = '국가대표' #전역변수

def funcSoccer():
    name = "한국인"    # 지역변수1
    player = '동네대표' # 지역변수2
    print(name, player)
    #return "반환값"

print(funcSoccer)
print(funcSoccer())

'''--------------  1) 파이썬에 나오는 KeyWord(global, nonlocal)  ---------------'''

a = 10; b = 20; c = 30
print('출력1: a:{}, b:{}, c:{}'.format(a, b, c))

def func1():
    a = 40
    b = 50
    
    def func2():
        global c
        nonlocal b
        
        print('출력2: a:{}, b:{}, c:{}'.format(a, b, c))
        c = 60 # local variable 'c' referenced before assignment
        b = 70
        
    func2()
    
func1()
print('출력3: a:{}, b:{}, c:{}'.format(a, b, c))


'''--------------------------------------------------------------
----------------------------- 정리용  ------------------------------
------------------------- <원래 전체 소스> ---------------------------
-----------------------------------------------------------------

a = 10; b = 20; c = 30

print('출력1: a:{}, b:{}, c:{}'.format(a, b, c))

def func1_s():
    a = 40
    b = 50
    
    def func2_s():
        global c 
        nonlocal b
        
        #c = 60
        print('출력2: a:{}, b:{}, c:{}'.format(a, b, c))
        
        c = 60
        b = 70
    func2_s()
    
func1_s()
print('출력3: a:{}, b:{}, c:{}'.format(a, b, c))

------------------------------- <결과> -------------------------------
출력1: a:10, b:20, c:30
출력2: a:40, b:50, c:30
출력3: a:10, b:20, c:60
------------------------------ <설명> --------------------------------
- 1) 여기서 중요한 것은 a가 누구인지, b는, c는 어디에 있는 변수를 가리키고 있는지가 중요하다. 

- 2) 함수 안에서 전역 변수로 만들어 줄때, global과 nonlocal keyword를 사용하면된다.
 
- 3) 사용 빈도는 global > nonlocal
----------------------------- <개념> ---------------------------------
Token이 모여서 하나의 Statement가 된다. 이렇게 구성된 값을 Parshing이라(or Syntax)한다.

- global c 하는 순간 c는 global이 된다. 

- 여기서 보이지 않는 곳에서 heap과 static 모두 존재 하고있다.(리터럴 풀)
===================================================================='''
